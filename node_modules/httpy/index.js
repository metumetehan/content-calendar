/**
 * Created by yuenshui on 16/4/1.
 */

var https = require('https');
var http = require('http');
var urlObj = require('url');
var querystring = require('querystring');
var zlib = require('zlib');
var fs = require('fs');



module.exports.create = function() {
	var httpsTool = {};
	httpsTool.headers = {};
	httpsTool.cookie = {};
	httpsTool.responseHeaders = {};

	httpsTool.get = function (url, callback) {
		this.query(url, 'GET', null, callback);
	};

	httpsTool.post = function (url, data, callback) {
		this.query(url, 'POST', data, callback);
	};

	var buildCookie = function(cookie) {
		var arr = [];
		for(var i in cookie) {
			arr.push(i + '=' + cookie[i]);
		}
		return arr.join('; ');
	}

	httpsTool.query = function(url, method, data, callback) {
		var info = urlObj.parse(url);
		httpsTool.responseHeaders = {};
		var postData = "";
		var options = {
			port: info.port ? info.port : info.protocol.substr(0, 5) == 'https' ? 443 : 80,
			method: method,
			rejectUnauthorized: false,
			host: info.hostname,
			path: info.path,
			headers: this.headers
		};
		options.headers['Content-Length'] = 0;
		var obj = info.protocol.substr(0, 5) == 'https' ? https : http;

		//console.log("options:", options, "url:", url, "data:", data, "method:", method);
		options.headers['cookie'] = buildCookie(httpsTool.cookie);

		if(method == "POST" && data) {
			console.log(data);
			switch (typeof data) {
				case 'object':
					postData = querystring.stringify(data);
					break;
				case 'string':
					postData = data;
					break;
				default:
					return false;
			}
			options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
			options.headers['Content-Length'] = Buffer.byteLength(postData);
		}

		try {
			var post_req = obj.request(options, function(res) {
				httpsTool.responseHeaders = res.headers;
				var body = '';
				var chunks =[], encoding = res.headers['content-encoding'];
				if(encoding === 'undefined') res.setEncoding('utf-8');
				res.on('data', function(chunk) {
					chunks.push(chunk);
				});
				res.on('end', function() {
					if(res.headers['set-cookie']) {
						res.headers['set-cookie'].map(function(item) {
							var match = /^([^=]+)=([^;]*)/.exec(item);
							if (match != null) {
								httpsTool.cookie[match[1]] = match[2];
							}
						});
					}
					var buffer = Buffer.concat(chunks);
					if(encoding == 'gzip') {
						zlib.gunzip(buffer, function (err, rs) {
							body = rs.toString();
							callback(err, body);
						});
					}
					else if (encoding == 'deflate') {
						zlib.inflate(buffer, function (err, decoded) {
							body = decoded.toString();
							callback(err, body);
						});
					}
					else {
						body = buffer.toString();
						callback(null, body);
					}
				});
				res.on('error', function(err) {
					console.log("httpy error:", e);
				});
			});
			post_req.on('error', function(e) {
				//console.log("httpy http error: " + e, url);
				callback(e, null);
			})
		}
		catch(e) {
			console.error("httpy try error:", e);
		}
		if(method == "POST" && data) {
			post_req.write(postData);
		}
		post_req.end();
	}
	
	httpsTool.get_y = function(url) {
		return function(done) {
			httpsTool.get(url, done);
		}
	};
	
	httpsTool.post_y = function(url, data) {
		return function(done) {
			httpsTool.post(url, data, done);
		}
	};

	httpsTool.download = function(url, path) {
		return function(done) {
			var info = urlObj.parse(url);
			httpsTool.responseHeaders = {};

			var options = {
				port: info.port ? info.port : info.protocol.substr(0, 5) == 'https' ? 443 : 80,
				method: 'GET',
				rejectUnauthorized: false,
				host: info.hostname,
				path: info.path,
				headers: httpsTool.headers
			};

			options.headers['Content-Length'] = 0;
			var obj = info.protocol.substr(0, 5) == 'https' ? https : http;
			options.headers['cookie'] = buildCookie(httpsTool.cookie);
			var o = obj.get(options, function(res){
				var imgData = "";
				res.setEncoding("binary");

				res.on("data", function(chunk){
					imgData += chunk;
				});
				res.on("end", function(){
					fs.writeFile(path, imgData, "binary", function(err){
						if(err){
							done(err, null);
						}
						else
							done(null, true);
					});
				});
			});
			o.on('error', function(e) {
				//console.log("httpy download error: " + e, url);
				callback(e, null);
			})
		}
	};
	return httpsTool;
};